#+title: GNU Emacs config
#+author: Yue Ren
#+description: config with main usecase latex and julialang, optimized for screen efficiency, requires up-to-date Emacs
#+STARTUP: show2levels

* Package management
** package archives
Load package, add prominent repositories, and update package data.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
#+end_src
** use-package
Add imenu-support (needs to be loaded before use-package)
#+begin_src emacs-lisp
  (setopt use-package-enable-imenu-support t)
#+end_src
Install use-package if necessary, load it, and set it to auto-install packages hereon.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package) (package-install 'use-package))
  (require 'use-package)
  (setopt use-package-always-ensure t)
#+end_src
* Fundamentals (basics)
Customizations that affect everything and require no external packages
** no-littering (early loading required)
Load no-littering, move auto-save files from current to '.emacs.d/var/auto-save/'.
#+begin_src emacs-lisp
  (use-package no-littering
    :custom
    (auto-save-file-name-transforms
     `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    :config
    (no-littering-theme-backups))
#+end_src
** behaviour
*** remember recently opened files
#+begin_src emacs-lisp
  (use-package recentf
    :custom
    (recentf-max-saved-items 1024 "increase number of saved files")
    :config
    (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/elpa/.*" (getenv "HOME"))) ;; exclude file from elpa
    (add-to-list 'recentf-exclude (recentf-expand-file-name no-littering-var-directory)) ;; exclude files from no-littering
    (add-to-list 'recentf-exclude (recentf-expand-file-name no-littering-etc-directory))
    (recentf-mode))
#+end_src
*** remember recently visited line in files
#+begin_src emacs-lisp
  (use-package saveplace
    :custom
    (save-place-limit 1024 "increase number of saved file lines")
    :config
    (save-place-mode))
#+end_src
*** remember minibuffer history
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (savehist-mode))
#+end_src
*** confirm before exiting emacs
#+begin_src emacs-lisp
  (setopt confirm-kill-emacs 'y-or-n-p)
#+end_src
*** disable compiliation warnings
#+begin_src emacs-lisp
  (setopt native-comp-async-report-warnings-errors 'silent)
#+end_src
*** disable warning popups unless error
#+begin_src emacs-lisp
  (setopt warning-minimum-level :error)
#+end_src
*** custom-file
Change custom-file as per instructions on
https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/
#+begin_src emacs-lisp
  (setopt custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file :no-error-if-file-is-missing)
#+end_src
*** smooth scrolling
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
#+end_src
** visuals
*** empty startup screen
#+begin_src emacs-lisp
  (setopt inhibit-startup-screen t)
#+end_src
*** empty scratch buffer and make it fundamental mode
#+begin_src emacs-lisp
  (setopt initial-scratch-message nil
  				initial-major-mode 'fundamental-mode)
#+end_src
*** remove top menu bar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src
*** remove right scroll bar
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src
*** remove top tool bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src
*** remove decorations
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(undecorated . t))
#+end_src
*** enable highlighting of current line in sources and texts
#+begin_src emacs-lisp
  (use-package hl-line
    :hook
    (prog-mode . hl-line-mode)
    (text-mode . hl-line-mode))
#+end_src
*** enable highlighting of parenthesis at point in programming modes
#+begin_src emacs-lisp
  (use-package paren
    :hook
    (prog-mode . show-paren-mode))
#+end_src
*** set fill-column width to 100
#+begin_src emacs-lisp
  (setq-default fill-column 100)
#+end_src
*** enable pairing of parenthesis in programming modes
#+begin_src emacs-lisp
  (use-package elec-pair
    :custom
    (electric-pair-inhibit-predicate 'yr/electric-pair-conservative-inhibit)
    :hook
    (prog-mode . electric-pair-mode)
    :init
    (defun yr/electric-pair-conservative-inhibit (char)
      (or
       ;; I find it more often preferable not to pair when the
       ;; same char is next.
       (eq char (char-after))
       ;; Don't pair up when we insert the second of "" or of ((.
       (and (eq char (char-before))
            (eq char (char-before (1- (point)))))
       ;; I also find it often preferable not to pair next to a word.
       (eq (char-syntax (following-char)) ?w)
       ;; Don't pair at the end of a word, unless parens.
       (and
        (eq (char-syntax (char-before (1- (point)))) ?w)
        (eq (preceding-char) char)
        (not (eq (char-syntax (preceding-char)) ?\()
             )))))
#+end_src
*** enable transparency
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha-background 92)              ;; for current frame
  (add-to-list 'default-frame-alist '(alpha-background . 92)) ;; for new frames henceforth
  (defun yr/toggle-window-transparency ()
    "Toggle current frame's background transparency."
    (interactive)
    (let* ((desired-alpha 92)
           (current-alpha (frame-parameter nil 'alpha-background)))
      (if (equal current-alpha desired-alpha)
          (progn
            (set-frame-parameter nil 'alpha-background nil) ;; Set current frame to opaque
            (setq default-frame-alist (assq-delete-all 'alpha-background default-frame-alist))) ;; Update default to opaque
        (progn
          (set-frame-parameter nil 'alpha-background desired-alpha) ;; Set current frame to transparent
          (add-to-list 'default-frame-alist '(alpha-background . 92)))))) ;; Update default to transparent
#+end_src
** modeline
*** display column number
#+begin_src emacs-lisp
  (column-number-mode)
#+end_src
*** display time
#+begin_src emacs-lisp
  (use-package time
    :custom
    (display-time-24hr-format t "display time in 24h format")
    :config
    (display-time-mode))
#+end_src
** frames and windows
*** maximize frames
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
*** switching windows
Use C-x <arrow> to switch windows.
#+begin_src emacs-lisp
  (use-package windmove
    :bind
    ( ("C-x <up>"    . windmove-up)
      ("C-x <down>"  . windmove-down)
      ("C-x <left>"  . windmove-left)
      ("C-x <right>" . windmove-right)))
#+end_src
*** prefer vertical splits over horizontal splits
https://github.com/jamescherti/minimal-emacs.d
#+begin_src emacs-lisp
  (setopt split-width-threshold 170
  				split-height-threshold nil)
#+end_src
** editing
*** add final newline before each save
#+begin_src emacs-lisp
  (setopt require-final-newline t)
#+end_src
*** auto-refresh files
#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src
*** set tab width
default is 8, which is too much
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src
*** use spaces instead of tabs
#+begin_src emacs-lisp
  (indent-tabs-mode 1)
#+end_src
*** overwrite selected text when typing over it
#+begin_src emacs-lisp
  (use-package delsel
    :config
    (delete-selection-mode 1))
#+end_src
*** alternatives of built-in commands
**** my-delete-line (C-k)
delete line without changing kill ring, alternative to kill-line
#+begin_src emacs-lisp
  (defun my-delete-line (&optional arg)
    (interactive "P")
    (delete-region (point)
                   (progn
                     (if arg
                         (forward-visible-line (prefix-numeric-value arg))
                       (if (eobp)
                           (signal 'end-of-buffer nil))
                       (let ((end
                              (save-excursion
                                (end-of-visible-line) (point))))
                         (if (or (save-excursion
                                   (unless show-trailing-whitespace
                                     (skip-chars-forward " \t" end))
                                   (= (point) end))
                                 (and kill-whole-line (bolp)))
                             (forward-visible-line 1)
                           (goto-char end))))
                     (point))))
  (global-set-key (kbd "C-k") 'my-delete-line)
#+END_SRC
**** my-delete-sentence (M-k)
delete sentence without changing kill ring, alternative to kill-sentence
#+begin_src emacs-lisp
  (defun my-delete-sentence (&optional arg)
    (interactive "p")
    (delete-region (point) (progn (forward-sentence arg) (point))))
  (global-set-key (kbd "M-k") 'my-delete-sentence)
#+end_src
**** my-kill-word (M-d)
delete word without changing kill ring, alternative to kill-word
#+begin_src emacs-lisp
  (defun my-delete-word (arg)
    (interactive "p")
    (delete-region (point) (progn (forward-word arg) (point))))
  (global-set-key (kbd "M-d") 'my-delete-word)
#+end_src
**** my-backward-kill-word (M-DEL)
delete word without changing kill ring, alternative to backward-kill-word
#+begin_src emacs-lisp
  (defun my-backward-kill-word (arg)
    (interactive "p")
    (my-delete-word (- arg)))
  (global-set-key (kbd "C-<backspace>") 'my-backward-kill-word)
#+end_src
** searching
*** show number of hits in modeline
#+begin_src emacs-lisp
  (setopt isearch-lazy-count t)
#+end_src
*** do not cancel search when scrolling
#+begin_src emacs-lisp
  (setopt isearch-allow-scroll t)
#+end_src
** spellchecking
Load appropriate personal dictionary based on ispell-local-dictionary.
#+begin_src emacs-lisp
(defun yr/setup-flyspell-personal-dictionary ()
  "Set ispell-personal-dictionary based on ispell-local-dictionary. Does nothing if ispell-local-dictionary is not set."
  (when (and (boundp 'ispell-local-dictionary) ispell-local-dictionary)
    (let* ((dict ispell-local-dictionary)
           (personal-dict (expand-file-name (format ".aspell.%s.pws" dict) (getenv "HOME")))
           (lang-name (if (string-match "_" dict)
                          (substring dict 0 (match-beginning 0)) ; Use the name up to the first `_` if it exists
                        dict)))                                  ; Use the entire name otherwise
      ;; Check if the personal dictionary file exists; if not, create it
      (unless (file-exists-p personal-dict)
        (with-temp-file personal-dict
          (insert (format "personal_ws-1.1 %s 0\n" lang-name))))
      ;; Set ispell-personal-dictionary
      (setq ispell-local-pdict personal-dict))))

(add-hook 'hack-local-variables-hook 'yr/setup-flyspell-personal-dictionary)
#+end_src
* Fundamentals (advanced)
Customizations that affect everything and require packages
** visuals
*** dracula-theme
Load dracula-theme as per instructions on
https://github.com/dracula/emacs
#+begin_src emacs-lisp
  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+end_src
*** dracula-pro-theme
Load dracula-pro-theme as per instructions in readme
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  ;; (load-theme 'dracula-pro-alucard t) ; light theme
  ;; (load-theme 'dracula-pro-pro t) ; dark theme
#+end_src
*** nerd-icons
Load nerd-icons as per instructions on
https://github.com/rainstormstudio/nerd-icons.el
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src
*** pulsar
Load pulsar as per instructions on
https://github.com/protesilaos/pulsar
#+begin_src emacs-lisp
  (use-package pulsar
    :custom
    (pulsar-face 'pulsar-magenta)
    (pulsar-pulse-region-functions pulsar-pulse-region-common-functions)
    :config
    (pulsar-global-mode 1))
#+end_src
** modeline
*** doom-modeline
Load doom-modeline as per instructions on
https://github.com/seagle0128/doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode 1))
#+end_src
** frames and windows
*** buffer-move
Load buffer-move for moving windows as per instructions on
https://github.com/lukhas/buffer-move
#+begin_src emacs-lisp
  (use-package buffer-move
    :bind
    (("C-x C-<up>" . buf-move-up)
     ("C-x C-<down>" . buf-move-down)
     ("C-x C-<left>" . buf-move-left)
     ("C-x C-<right>" . buf-move-right)))
#+end_src
*** ace-window
Load ace-window for switching between windows and frames
#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    (("M-o" . ace-window))
    :config
    (ace-window-posframe-mode) ;; enable posframes
    (setq aw-posframe-position-handler #'posframe-poshandler-window-top-left-corner)) ;; position posframes top left as in default
#+end_src
** editing
*** visual-replace
Load visual-replace as per instructions on
https://github.com/szermatt/visual-replace
#+begin_src emacs-lisp
(use-package visual-replace
  :bind (("M-%" . visual-replace)
         :map isearch-mode-map
         ("M-%" . visual-replace-from-isearch))
  :config
  (define-key visual-replace-mode-map (kbd "M-%")
              visual-replace-secondary-mode-map))
#+end_src
*** ws-butler
Load ws-butler as per instructions on
https://github.com/lewang/ws-butler
#+begin_src emacs-lisp
  (use-package ws-butler
  	:hook
  	(prog-mode . ws-butler-mode)
  	(text-mode . ws-butler-mode))
#+end_src
*** move-text
Load move-text as per instructions on
https://github.com/emacsfodder/move-text
Enables moving current line or region up and down via `M-<up>` and `M-<down>`,
similar to moving bullet points in org-mode.
#+begin_src emacs-lisp
  (use-package move-text
  	:config
  	(move-text-default-bindings))
#+end_src
** startup
*** dashboard
Set up dashboard as per instructions on:
https://github.com/emacs-dashboard/emacs-dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-center-content t) ;; center dashboard
    (dashboard-startupify-list '(dashboard-insert-items)) ;; only show items in dashboard
    (dashboard-items '((bookmarks . 12)  ;; show 12 bookmarks
                       (recents  . 36))) ;; show 36 recent files
    (dashboard-icon-type 'nerd-icons)    ;; show icons
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
  	(initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name))) ;; make dashboard the initial buffer
    :config
    (dashboard-setup-startup-hook))    ;; open dashboard on startup
#+end_src
* Completion framework
Customizations that affect completions
** vertico
Load vertico for vertical minibuffer completion UI as per instructions on
https://github.com/minad/vertico
#+begin_src emacs-lisp
  (use-package vertico
    ;; :custom
    ;; (vertico-count 6)  ;; Customize number of candidates shown
    :config
    (vertico-mode))
#+end_src
** marginalia
Load marginalia for minibuffer annotations as per instructions on
https://github.com/minad/marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src
** nerd-icons-completion
Load nerd-icons-completions for nerd icons in marginalia as per instructions on
https://github.com/rainstormstudio/nerd-icons-completion
#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src
** which-key
Load which-key as per instructions on
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :custom
    (which-key-separator ": ") ;; change seperator to fix vertical spacing issues
    :config
    (which-key-mode))
#+end_src
** corfu
Load corfu for autocomplete as per instructions on
https://github.com/minad/corfu
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)  ;; Enable showing autocompletion automatically
    (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
    :config
    (global-corfu-mode))
#+end_src
** nerd-icons-corfu
Load nerd-icons-corfu for nerd icons in corfu as per instructions on
https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/
#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
** cape
Load cape to use company backends for corfu as per instructions on
https://github.com/minad/cape
#+begin_src emacs-lisp
(use-package cape
  ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
  ;; Press C-c p ? to for help.
  :bind ("C-c p" . cape-prefix-map)
  :config
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  ;; (add-hook 'completion-at-point-functions #'cape-history)
  ;; ...
)
#+end_src
** orderless
Load orderless for completion with space-seperated components as per instructions on
https://github.com/oantolin/orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** prescient
Load prescient for better ordering of completions as per instructions on
https://github.com/radian-software/prescient.el
#+begin_src emacs-lisp
  (use-package prescient
    :after vertico)
  (use-package vertico-prescient
    :after prescient
    :config
    (vertico-prescient-mode))
  (use-package corfu-prescient
    :after prescient
    :config
    (corfu-prescient-mode))
#+end_src
* Essentials
Packages that affect several aspects
** consult
*** Basic setup
Load consult for various useful commands as per instructions on
https://github.com/minad/consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)              ;; Alternative: consult-flymake
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-fd)                    ;; Alternative: consult-find
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

  	;; Tweak the register preview for `consult-register-load',
  	;; `consult-register-store' and the built-in commands.  This improves the
  	;; register formatting, adds thin separator lines, register sorting and hides
  	;; the window mode line.
  	(advice-add #'register-preview :override #'consult-register-window)
  	(setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

  	;; Optionally make narrowing help available in the minibuffer.
  	;; You may want to use `embark-prefix-help-command' or which-key instead.
  	;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src
** embark
*** Basic setup
Load embark as per instructions on
https://github.com/oantolin/embark
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
  	;; make C-h trigger embark powered search under partially entered commands
  	(setq prefix-help-command #'embark-prefix-help-command)

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    (setq embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))

    (advice-add #'embark-completing-read-prompter
                :around #'embark-hide-which-key-indicator))
#+end_src
*** embark-consult
Load embark-consult as per instructions on
https://github.com/oantolin/embark
#+begin_src emacs-lisp
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** helpful
Load helpful for better help packages
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    (("C-h f" . helpful-function)
     ("C-h x" . helpful-command)
     ("C-h k" . helpful-key)
     ("C-h v" . helpful-variable)))
#+end_src
** powerthesaurus
Load powerthesaurus for looking up synonyms, antonyms and related terms as per instructions on
https://github.com/SavchenkoValeriy/emacs-powerthesaurus
#+begin_src emacs-lisp
  (use-package powerthesaurus
    :commands powerthesaurus-transient) ;; defer loading after powerthesaurus-transient is called
#+end_src
** go-translate
Load go-translate to translate between German and English (C-n / C-p to switch direction),
as per instructions on https://github.com/lorniu/go-translate
#+begin_src emacs-lisp
  (use-package go-translate
    :commands gt-do-translate  ;; defer loading until gts-do-translate is called
    :custom
    (gt-langs '(de en))
    (gt-default-translator
     (gt-translator
      :taker (gt-taker :prompt t)
      :engines (gt-google-engine)
      :render  (gt-buffer-render))))
#+end_src
* Posframes
Packages and customizations for posframes
** vertico-posframe
Load vertico-posframe to show vertico in a posframe as per instructions on
https://github.com/tumashu/vertico-posframe
#+begin_src emacs-lisp
  (use-package vertico-posframe
    :config
    (vertico-posframe-mode))
#+end_src
** which-key-posframe
Load which-key-posframe to show which-key in a posframe as per instructions on
https://github.com/yanghaoxie/which-key-posframe
#+begin_src emacs-lisp
  (use-package which-key-posframe
    :config
    (which-key-posframe-mode))
#+end_src
** transient-posframe
Use workaround for transient-posframe to show transients in a posframe as per instructions on
https://github.com/yanghaoxie/transient-posframe/pull/7
#+begin_src emacs-lisp
(setq transient-mode-line-format nil)
(setq transient-display-buffer-action
      (list
       (lambda (buffer _)
         (posframe-show
          buffer
          :poshandler #'posframe-poshandler-frame-center
          :min-width transient-minimal-frame-width
          :lines-truncate t
          :internal-border-color (transient--prefix-color)
          :internal-border-width 1)
         (get-buffer-window transient--buffer t))))
#+end_src
* Transients
Packages for transient shortcuts
** casual
Load casual and bind it to `?` as per instructions in
https://github.com/kickingvegas/casual/discussions/78
#+begin_src emacs-lisp
  (use-package casual
    :config
    (require 'casual-calc)
    (require 'casual-dired)
    (require 'casual-ibuffer)
    (require 'casual-info)
    :bind (:map calc-mode-map
           ("?" . 'casual-calc-tmenu)
           :map dired-mode-map
           ("?" . 'casual-dired-tmenu)
           ("s"   . 'casual-dired-sort-by-tmenu)
           ("/"   . 'casual-dired-search-replace-tmenu)
           :map ibuffer-mode-map
           ("?" . 'casual-ibuffer-tmenu)
           ("F"   . 'casual-ibuffer-filter-tmenu)
           ("s"   . 'casual-ibuffer-sortby-tmenu)
           :map Info-mode-map
           ("?" . 'casual-info-tmenu)))
#+end_src
* Folding
** outline-indent
Load outline-indent as per instructions on
https://github.com/jamescherti/outline-indent.el
#+begin_src emacs-lisp
  (use-package outline-indent
    :bind
    (("<backtab>" . yr/outline-indent-toggle-fold))
    :custom
    (outline-indent-ellipsis " ▼ ")
    :init
    (defun yr/outline-indent-toggle-fold ()
      "Open or close a fold under point recursively."
      (interactive)
      (save-excursion
        (outline-back-to-heading)
        (if (not (outline-invisible-p (line-end-position)))
            (outline-indent-close-fold)
          (outline-indent-open-fold-rec)))))
#+end_src
** indent-bars
Load indent-bars as per instructions on
https://github.com/jdtsmith/indent-bars
#+begin_src emacs-lisp
  (use-package indent-bars
    :custom
    (indent-bars-color '(highlight :face-bg t :blend 0.2)) ; decreasing visibility of bars
    :init
    (defun yr/indent-bars-tex-setup () ; correcting bar spacing for tex files
      (when (derived-mode-p 'tex-mode)
        (setq-local indent-bars-spacing-override 2)
        (indent-bars-reset)))
    (add-hook 'indent-bars-mode-hook 'yr/indent-bars-tex-setup))
#+end_src
* Dired
Packages and customizations for dired
** basic setup
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil ; do not load, it is built-in and no such package exist
    :custom
    (dired-listing-switches "-alFh")             ; all files, list, add / to folders, human readable sizes
    (dired-kill-when-opening-new-dired-buffer t) ; open folders in existing buffer instead of a new buffer
    (global-auto-revert-non-file-buffers t)      ; auto-refresh
    (dired-dwim-target t)                        ; if two dired buffers open, use other as default target
    (wdired-allow-to-change-permissions t)       ; allow wdired to change permissions
    (wdired-allow-to-redirect-links t))          ; allow wdired to change symlinks
#+end_src
** dired-subtree
Load dired-subtree and bind dired-subtree-toggle to tab as per intstructions on
https://www.youtube.com/watch?v=vm-FvNdYFcc
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<S-tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle))
    :custom
    (dired-subtree-use-backgrounds . nil)) ;; no special background for dired-subtree
#+end_src
** dired-open
Load dired-open as per instructions on
https://github.com/Fuco1/dired-hacks/tree/master?tab=readme-ov-file#dired-open
#+begin_src emacs-lisp
  (use-package dired-open
    :after dired
    :custom
    (dired-open-extensions
     '(("doc" . "libreoffice")
       ("xls" . "libreoffice")
       ("ppt" . "libreoffice")
       ("odt" . "libreoffice")
       ("ods" . "libreoffice")
       ("odg" . "libreoffice")
       ("odp" . "libreoffice"))))
#+end_src
** nerd-icons-dired
Load nerd-icons-dired as per instructions on
https://github.com/rainstormstudio/nerd-icons-dired
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src
* Notes
Packages and customizations for note taking
** org
Customizations for org
*** basic setup
Load org when opening .org files.
#+begin_src emacs-lisp
  (use-package org
    :mode
    ("\\.org\\'" . org-mode) ;; defer loading and auto-activate when .org file is opened
    :hook
    (org-mode . indent-bars-mode) ;; enable indent bars
    :bind (:map org-mode-map
                ("C-c C-x M-w" . my/org-copy-special))
    :custom
    (org-startup-indented t)            ;; on startup indent lines
    (org-startup-truncated nil)         ;; on startup disable truncate
    (org-support-shift-select 'always)  ;; allow shift select
    (org-image-actual-width nil)        ;; allow custom sizesof images
    (org-ellipsis " ▼")
    (org-agenda-files '("~/notes"))
    :config
    (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.1))
    (defun my/text-scale-adjust-latex-previews ()
      "Adjust the size of latex preview fragments when changing the buffer's text scale."
      (pcase major-mode
        ('latex-mode
         (dolist (ov (overlays-in (point-min) (point-max)))
           (if (eq (overlay-get ov 'category)
                   'preview-overlay)
               (my/text-scale--resize-fragment ov))))
        ('org-mode
         (dolist (ov (overlays-in (point-min) (point-max)))
           (if (eq (overlay-get ov 'org-overlay-type)
                   'org-latex-overlay)
               (my/text-scale--resize-fragment ov))))))

    (defun my/text-scale--resize-fragment (ov)
      (overlay-put
       ov 'display
       (cons 'image
             (plist-put
              (cdr (overlay-get ov 'display))
              :scale (+ 1.0 (* 0.3 text-scale-mode-amount))))))

    (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)
    :init
    (defun my/org-copy-special ()
      "Copy the current region using `org-copy-special` and deactivate the mark."
      (interactive)
      (org-copy-special)
      (deactivate-mark)))
#+end_src
*** org-modern
Load org-modern as per instructions on
https://github.com/minad/org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org                    ;; defer loading after org
    :hook
    (org-mode . org-modern-mode)) ;; auto-activate in org-mode
#+end_src
*** org-pdftools
Load org-pdftools as per instructions on
https://github.com/fuxialexander/org-pdftools
#+begin_src emacs-lisp
    (use-package org-pdftools
      :after (:any org pdf-tools)
      :hook (org-mode . org-pdftools-setup-link))
#+end_src
** denote
Customizations for denote
*** Basic setup
Load denote for note taking as per instructions on
https://protesilaos.com/emacs/denote
#+begin_src emacs-lisp
  (use-package denote
    :bind
    (("C-c n n" . denote-open-or-create)
     ("C-c n r" . denote-rename-file)
     ("C-c n l" . denote-link)
     ("C-c n b" . denote-backlinks)
     ("C-c n d" . denote-sort-dired))
    :hook
    (dired-mode . denote-dired-mode)    ;; file highlighting in dired
    :custom
    (denote-directory "~/notes/")
    :config
    (denote-rename-buffer-mode 1))
#+end_src
** denote-org
Load denote-org for note taking as per instructions on
https://protesilaos.com/emacs/denote-org
#+begin_src emacs-lisp
  (use-package denote-org
  	:after denote)
#+end_src
* Presentations
Packages and customizations for presentations
** org-present
Setting up org-present for basic presentations in org-files as per instructions on:
https://systemcrafters.net/emacs-tips/presentations-with-org-present/
#+begin_src emacs-lisp
  (use-package org-present
    :after org
    :config
    (define-key org-present-mode-keymap [right] nil) ;; undo binding right key
    (define-key org-present-mode-keymap [left] nil)  ;; undo binding left key
    (define-key org-present-mode-keymap (kbd "<next>") 'org-present-next)   ;; bind next slide to pageup
    (define-key org-present-mode-keymap (kbd "<prior>") 'org-present-prev)) ;; bind previous slide to pagedown
#+end_src
** visual-fill-column
Load visual-fill-column to pad and center text (in org-present) as per instructions on
https://systemcrafters.net/emacs-tips/presentations-with-org-present/
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :init
    ;; Configure fill width
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)

    (defun my/org-present-start ()
      ;; Center the presentation and wrap lines
      (visual-fill-column-mode 1)
      (visual-line-mode 1))

    (defun my/org-present-end ()
      ;; Stop centering the document
      (visual-fill-column-mode 0)
      (visual-line-mode 0))

    (add-hook 'org-present-mode-hook 'my/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'my/org-present-end))

    ;; Register hooks with org-present
    ;; :hook
    ;; (org-present-mode-hook . my/org-present-start)
    ;; (org-present-mode-quit-hook . my/org-present-end))
#+end_src
* Git
Packages and customizations for git
** magit
Load magit as per instructions on
https://github.com/magit/magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status ;; defer loading until magit-status is called
    :custom
    (magit-format-file-function #'magit-format-file-nerd-icons))
#+end_src
** magit-todos
Load magit-todos as per instructions on
https://github.com/alphapapa/magit-todos
#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit
    :config
  	(magit-todos-mode 1))
#+end_src
** forge (disabled)
Load forge as per instructions on
https://github.com/magit/forge
#+begin_src emacs-lisp
  (use-package forge
    :after magit) ;; defer loading until magit is loaded
  (setq auth-sources '("~/.authinfo.gpg"))
#+end_src
* Latex
Packages and customizations for latex
** Basic setup
Load auctex, reftex, and flyspell when opening .tex files.
#+begin_src emacs-lisp :noweb tangle
  (use-package tex
    :ensure auctex
    :mode
    ("\\.tex\\'" . latex-mode)
    :hook
    (LaTeX-mode . reftex-mode)      ;; enable referencing
    (LaTeX-mode . turn-on-flyspell) ;; enable spellchecking
    (LaTeX-mode . outline-indent-minor-mode) ;; enable folding
    (LaTeX-mode . indent-bars-mode) ;; enable indentation highlighting
    :init
    (setq TeX-parse-self t ;; auto-parse tex file on load
          TeX-auto-save t  ;; auto-parse tex file on save
          TeX-master nil)  ;; always query for master file
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (add-hook 'TeX-update-style-hook 'hl-todo-mode) ;; fix for hl-todo-mode
    :config
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
          TeX-source-correlate-mode t
          TeX-source-correlate-start-server t)
    <<tex-custom-highlighting>>
    <<tex-custom-verbatim-environments>>
    <<tex-custom-spellcheck-blacklist-macros>>
    <<tex-custom-spellcheck-blacklist-environments>>
    <<tex-custom-query-labels>>
    <<tex-custom-folding>>
    <<tex-custom-folding-face>>
    <<tex-custom-reftex-goto-label>>
    <<tex-custom-bibtool-current-file>>
    )
#+end_src
** Custom highlighting
*** Highlight \cref like \ref
#+name: tex-custom-highlighting
#+begin_src emacs-lisp :tangle no
  (setq font-latex-match-reference-keywords
        '(("cref" "{")))
#+end_src
** Custom verbatim enviroments
*** Register lstlisting as verbatim environment to ignore it for syntax highlighting
#+name: tex-custom-verbatim-environments
#+begin_src emacs-lisp :tangle no
  (eval-after-load 'latex '(add-to-list 'LaTeX-verbatim-environments "jllisting"))
#+end_src
** Custom spellcheck blacklist
*** ignore arguments of cref and input
#+name: tex-custom-spellcheck-blacklist-macros
#+begin_src emacs-lisp :tangle no
  (setq flyspell-tex-command-regexp
        "\\(\\(begin\\|end\\)[ \t]*{\\|\\(documentclass\\|cite[a-z*]*\\|ref\\|cref\\|Cref\\|eqref\\|input\\|label\\|textsc\\|texttt\\|usepackage\\)[ \t]*\\(\\[[^]]*\\]\\)?{[^{}]*\\)")
#+end_src
*** Ignore content of tikzpicture and lstlisting
#+name: tex-custom-spellcheck-blacklist-environments
#+begin_src emacs-lisp :tangle no
  (put 'LaTeX-mode 'flyspell-mode-predicate 'auctex-mode-flyspell-skip-myenv)
  (defun auctex-mode-flyspell-skip-myenv ()
    (save-excursion
      (widen)
      (let ((p (point))
            (count 0))
        (not (or (and (re-search-backward "\\\\begin{\\(tikzpicture\\|lstlisting\\|myenv3\\)}" nil t)
                      (> p (point))
                      (or (not (re-search-forward "^\\\\end{\\(tikzpicture\\|lstlisting\\|myenv3\\)}" nil t))
                          (< p (point))))
                 (eq 1 (progn (while (re-search-backward "`" (line-beginning-position) t)
                                (setq count (1+ count)))
                              (- count (* 2 (/ count 2))))))))))
  (add-hook 'LaTeX-mode-hook (lambda () (setq flyspell-generic-check-word-predicate
                                              'auctex-mode-flyspell-skip-myenv)))
#+end_src
** Custom query labels
*** Auto-query for labels of certain environments
#+name: tex-custom-query-labels
#+begin_src emacs-lisp :tangle no
  (setq reftex-label-alist
        '(("convention" ?d "con:" "~\\ref{%s}" t  ("convention" "con."))
          ("corollary" ?p "cor:" "~\\ref{%s}" t  ("corollary" "cor."))
          ("definition" ?d "def:" "~\\ref{%s}" t  ("definition" "def."))
          ("example" ?x "ex:" "~\\ref{%s}" t  ("example" "ex."))
          ("lemma" ?p "lem:" "~\\ref{%s}" t  ("lemma" "lem."))
          ("proposition" ?p "prop:" "~\\ref{%s}" t  ("proposition" "prop."))
          ("remark" ?x "rem:" "~\\ref{%s}" t  ("remark" "rem."))
          ("theorem" ?p "thm:" "~\\ref{%s}" t ("theorem" "thm."))))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-add-environments
               '("convention" LaTeX-env-label)
               '("corollary" LaTeX-env-label)
               '("definition" LaTeX-env-label)
               '("example" LaTeX-env-label)
               '("lemma" LaTeX-env-label)
               '("proposition" LaTeX-env-label)
               '("remark" LaTeX-env-label)
               '("theorem" LaTeX-env-label))
              (add-to-list 'LaTeX-label-alist '("convention" . "con:"))
              (add-to-list 'LaTeX-label-alist '("corollary" . "cor:"))
              (add-to-list 'LaTeX-label-alist '("definition" . "def:"))
              (add-to-list 'LaTeX-label-alist '("example" . "ex:"))
              (add-to-list 'LaTeX-label-alist '("lemma" . "lem:"))
              (add-to-list 'LaTeX-label-alist '("proposition" . "prop:"))
              (add-to-list 'LaTeX-label-alist '("remark" . "rem:"))
              (add-to-list 'LaTeX-label-alist '("theorem" . "thm:"))))
#+end_src
** Custom folding
Enable folding and unfolding
#+name: tex-custom-folding
#+begin_src emacs-lisp :tangle no
  (defun yr/TeX-fold-all ()
    (interactive)
    (let ((env (read-from-minibuffer "Environment: ")))
      (save-excursion
        (goto-char (point-min))
        (while (search-forward (format "begin{%s}" env) nil t)
          (TeX-fold-env)))))
  (defun yr/TeX-unfold-all ()
    (interactive)
    (let ((env (read-from-minibuffer "Environment: ")))
      (save-excursion
        (goto-char (point-min))
        (while (search-forward (format "begin{%s}" env) nil t)
          (TeX-fold-clearout-item)))))
#+end_src
Disable custom face when temporarily showing folded text
#+name: tex-custom-folding-face
#+begin_src emacs-lisp :tangle no
  (custom-set-faces
   '(TeX-fold-unfolded-face ((t nil))))
#+end_src
** Custom reftex-goto-label
By default, `reftex-goto-label` does not `push-mark` at the point of departure, so you cannot jump back by using `C-u C-SPC`.
This function fixes this issue
#+name: tex-custom-reftex-goto-label
#+begin_src emacs-lisp :tangle no
(defun yr/reftex-goto-label ()
  "Wrapper around reftex-goto-label with jump back functionality."
  (interactive)
  (push-mark)
  (reftex-goto-label))
#+end_src
** Custom bibtool-current-file
Custom command for running bibtool on a currently opened .bib file
#+name: tex-custom-bibtool-current-file
#+begin_src emacs-lisp :tangle no
  (defun yr/bibtool-current-file ()
    "Run bibtool on the current buffer's file."
    (interactive)
    (let ((file (buffer-file-name)))
      (if file
          (let ((default-directory (file-name-directory file))
                (base-file (file-name-nondirectory file)))
            (shell-command (concat "bibtool " base-file " -o " base-file)))
        (message "Not visiting a file!"))))
#+end_src
** company-backends
Load various company latex backends via cape for corfu (for autocomplete)
*** company-math
#+begin_src emacs-lisp
  (use-package company-math
    :after tex
    :init
    (defun math-setup-capf ()
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-math-symbols-latex))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-math-symbols-unicode))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-latex-commands)))
    :hook
    (LaTeX-mode . math-setup-capf))
#+end_src
*** company-reftex
#+begin_src emacs-lisp
  (use-package company-reftex
    :after tex
    :init
    (defun reftex-setup-capf ()
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-reftex-labels))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-reftex-citations)))
    :hook
    (LaTeX-mode . reftex-setup-capf))
#+end_src
*** company-auctex
#+begin_src emacs-lisp
  (use-package company-auctex
    :after tex
    :init
    (defun auctex-setup-capf ()
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-labels))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-bibs))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-macros))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-symbols))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-environments)))
    :hook
    (LaTeX-mode . auctex-setup-capf))
#+end_src
** pdf-tools
Load pdf-tools to view pdfs as per instructions on
https://github.com/vedang/pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode "\\.pdf\\'"
    :custom
    (pdf-view-resize-factor 1.05) ;; decrease resizing factor for better control
    :init
    (pdf-loader-install))
#+end_src
** citar
Load citar to handle global bibliography in all.bib (exported from zotero) as per instructions on
https://github.com/emacs-citar/citar
#+begin_src emacs-lisp
  (use-package citar
    :after tex
    :custom
    (citar-bibliography '("~/all.bib")))
#+end_src
** Latex input
Customizing latex input method as per instructions on
https://www.emacswiki.org/emacs/TeXInputMethod
#+begin_src emacs-lisp
  (setopt default-input-method "TeX")
  (with-temp-buffer
    (activate-input-method "TeX") ;; the input method has to be triggered for `quail-package-alist' to be non-nil
    (let ((quail-current-package (assoc "TeX" quail-package-alist)))
      (quail-define-rules ((append . t))
                          ("^\\alpha" ?ᵅ)
                          ("\\NN" ?ℕ)
                          ("\\ZZ" ?ℤ)
                          ("\\QQ" ?ℚ)
                          ("\\RR" ?ℝ)
                          ("\\CC" ?ℂ))))
#+end_src
* Julia
Packages and customizations for julia
** julia-mode
Load julia-mode as per instructions on
https://github.com/JuliaEditorSupport/julia-emacs
#+begin_src emacs-lisp
  (use-package julia-mode
    :mode "\\.jl\\'" ;; defer loading until and auto-activate when .jl files are opened
    :hook
    (julia-mode . outline-indent-minor-mode) ;; enable folding
    (julia-mode . indent-bars-mode) ;; show indent bars
    :init
    (with-eval-after-load 'julia-mode ;; disable <backtack> shortcut, it is reserved for folding
      (define-key julia-mode-map (kbd "<backtab>") nil)))
#+end_src
** julia-repl
Install julia-repl as per instructions on
https://github.com/tpapp/julia-repl
#+begin_src emacs-lisp
  (use-package julia-repl
    :after julia-mode                    ;; defer loading until julia-mode is started
    :hook (julia-mode . julia-repl-mode) ;; auto-activate when julia-mode is started
    :config
    (julia-repl-set-terminal-backend 'vterm)) ;; use vterm (recommended)
#+end_src
** eglot-jl
Load eglot-js for language server support as per instructions on
https://github.com/non-Jedi/eglot-jl
#+begin_src emacs-lisp
  (use-package eglot-jl
    :after julia-mode            ;; defer loading until julia-mode is started
    :hook
    (julia-mode . eglot-ensure)  ;; auto-activate when julia-mode is started
    (julia-mode . eglot-jl-init)
    :custom
    (eldoc-echo-area-use-multiline-p nil)
    (eglot-connect-timeout nil))
#+end_src
** vterm
Install vterm as per instructions on
https://github.com/akermu/emacs-libvterm
#+begin_src emacs-lisp
  (use-package vterm
    :after julia-mode) ;; defer loading until julia-mode is started
#+end_src
** prism
Install prism as per instructions on
https://github.com/alphapapa/prism.el
#+begin_src emacs-lisp
  (use-package prism
    :after julia-mode
    :hook (julia-mode . prism-whitespace-mode)) ;; auto-activate in julia-mode
#+end_src
** symbol-overlay
Install symbol overlay
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :after julia-mode ;; defer loading until julia-mode is started
    :hook (julia-mode . symbol-overlay-mode)) ;; auto-activate in julia-mode
#+end_src
* C++
Packages and customizations for C++
** indentation
Disable tabs indentation and set offset to 2.
#+begin_src emacs-lisp
  (setq-default c-default-style "linux"
                c-basic-offset 2)
#+end_src
** singular
Turn on C++-mode for files ending in ".sing" and ".lib" for Singular.
#+begin_src emacs-lisp
  (setq auto-mode-alist (cons '("\\.sing\\'" . c++-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.lib\\'" .  c++-mode) auto-mode-alist))
#+end_src
* LLMs
Packages and customizations for LLMs
** Copilot
Installing copilot as per the instructions on
https://github.com/copilot-emacs/copilot.el
#+begin_src emacs-lisp
  (use-package copilot
    :after julia-mode ;; defer loading after julia-mode has started
    :hook (julia-mode . copilot-mode)
    :custom
    (copilot--base-dir "~/.emacs.d/straight/repos/copilot.el/")
    (copilot-indent-offset-warning-disable t) ;; disables a warning that always arises in tex-mode
    :bind (:map copilot-completion-map
           ("C-<tab>" . copilot-accept-completion)))
#+end_src
** GPTel
Installing GPTel as per instructions on
https://github.com/karthink/gptel
#+begin_src emacs-lisp
  (use-package gptel
    :commands gptel ;; defer loading after gptel is called
  	:config
  	;; the following setq has to be in :config, putting it in :custom does not work
  	(setopt
  	 gptel-model 'gemini-2.0-flash
  	 gptel-backend (gptel-make-gemini "Gemini"
  									 :key (gptel-api-key-from-auth-source "gemini.googleapi.com")
  									 :stream t))
  	:init
  	;; the following has to be in :init, putting it in :config does not work
  	(setopt gptel-directives '((default     . "You are a large language model living in Emacs and a helpful assistant. Provide comprehensive answers and use examples where appropriate.")
  														 (programming . "You are a large language model and a careful programmer. Provide code and only code as output without any additional text, prompt or note.")
  														 (writing     . "You are a large language model and a writing assistant. Provide comprehensive answers and use examples where appropriate.")
  														 (chat        . "You are a large language model and a conversation partner. Provide comprehensive answers and use examples where appropriate."))))
#+end_src
* Server
** Initialisation
No config necessary.  To use emacs in daemon mode, just start emacs with `emacsclient -c -a=""` instead of `emacs`, e.g., by mapping it to some hotkey.  The command is short for `emacsclient --create-frame --alternate-editor="emacs --daemon"`.
** Shutdown
Make sure that recent file list etc get updated when shutting down system.
#+begin_src emacs-lisp
  (use-package dbus
  	:config
    (defun my-inhibit-logout--on-query-end-session (&rest _)
      "Handler for GNOME session QueryEndSession signal."
  		;; (do-auto-save)
  		;; (when (fboundp 'savehist-autosave) (savehist-autosave))
  		;; (when (fboundp 'desktop-auto-save) (desktop-auto-save))
      ;; (when (fboundp 'recentf-save-list) (recentf-save-list))
  		(call-interactively #'do-auto-save)
  		(call-interactively #'kill-emacs)
  		)

  	(dbus-register-signal
     :session
     "org.gnome.SessionManager"
     "/org/gnome/SessionManager/Client1"
     "org.gnome.SessionManager.ClientPrivate"
     "QueryEndSession"
     #'my-inhibit-logout--on-query-end-session)
  	)
#+end_src
