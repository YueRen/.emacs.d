#+title: emacs.el
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Essentials
This section configures the essentials of emacs, which are options that are not mode-specific
** package repositories and use-package
Disable compiliation warnings
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

Load 'package, add prominent repositories, and update package data
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
#+end_src

Install 'use-package if necessary, load it, and set it to auto-install packages hereon
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package) (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** no-littering (loading early required)
Load no-littering, move auto-save files from current to '.emacs.d/var/auto-save/'.
#+begin_src emacs-lisp
  (use-package no-littering)
  (no-littering-theme-backups)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** visual basics (no external packages required)
Maximize frames by default.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Empty startup screen and scratch buffer.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
#+end_src

Remove top menu bar, right scroll bar, and top tool bar.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Display column number.
#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

Enable parenthesis highlighting in programming modes.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'show-paren-mode)
#+end_src

** behaviour basics (no external packages required)
Remember recently opened files, recent lines and minibuffer-history.
#+begin_src emacs-lisp
  (recentf-mode)
  (save-place-mode)
  (savehist-mode)
#+end_src

Limit size of history to 128.
#+begin_src emacs-lisp
  (setq history-length 128)
#+end_src

Ignore files generated by elpa and no-littering.
#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/elpa/.*" (getenv "HOME")))
  (add-to-list 'recentf-exclude
               (recentf-expand-file-name no-littering-var-directory))
  (add-to-list 'recentf-exclude
               (recentf-expand-file-name no-littering-etc-directory))
#+end_src

Auto-delete trailing whitespaces before each save.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Auto-add final newline before each save.
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

Auto-refresh files.
#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

Set default tab width to 2 (can be overwritten by other modes like julia-mode)
and indent using spaces instead of tabs.
#+begin_src emacs-lisp
  (setq-default tab-width 2
                indent-tabs-mode nil)
#+end_src

Use C-x <arrow> to change between buffers.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
#+end_src

Make C-del, C-backspace, etc not put deleted text in kill-ring.
#+begin_src emacs-lisp
  (defun my-delete-word (arg)
    "Delete characters forward until encountering the end of a word.
     With argument, do this that many times.
     This command does not push text to `kill-ring'."
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (defun my-backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
     With argument, do this that many times.
     This command does not push text to `kill-ring'."
    (interactive "p")
    (my-delete-word (- arg)))

  (defun my-delete-line ()
    "Delete text from current position to end of line char.
     This command does not push text to `kill-ring'."
    (interactive)
    (delete-region
     (point)
     (progn (end-of-line 1) (point)))
    (delete-char 1))

  (defun my-delete-line-backward ()
    "Delete text between the beginning of the line to the cursor position.
     This command does not push text to `kill-ring'."
    (interactive)
    (let (p1 p2)
      (setq p1 (point))
      (beginning-of-line 1)
      (setq p2 (point))
      (delete-region p1 p2)))
                                          ; bind them to emacs's default shortcut keys:
  (global-set-key (kbd "C-S-k") 'my-delete-line-backward) ; Ctrl+Shift+k
  (global-set-key (kbd "C-k") 'my-delete-line)
  (global-set-key (kbd "M-d") 'my-delete-word)
  (global-set-key (kbd "<C-delete>") 'my-delete-word)
  (global-set-key (kbd "<C-backspace>") 'my-backward-delete-word)
  (global-set-key (kbd "<M-backspace>") 'my-backward-delete-word)
#+end_src

Overwrite selected text when typing text.
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** dired (no external packages required)
Use-Package-Always-Ensure human readable sizes.
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alFh")
#+end_src

Auto-refresh dired.
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** visual theme
Load dracula-theme in GUI and manoj-dark in terminal.
#+begin_src emacs-lisp
  (use-package dracula-theme)
  (if (display-graphic-p)
      (load-theme 'dracula t)
    (load-theme 'manoj-dark t))
#+end_src

** visual fonts
Todo(?): fonts
#+begin_src emacs-lisp
#+end_src

** vertico
Load vertico for vertical minibuffer completion UI
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more/less candidates
    (setq vertico-count 3)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
Note: `vertico-multiform-categories` is set in the jinx section

** marginalia
Load marginalia for minibuffer annotations
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src
** orderless
Load orderless for completion with space-seperated components
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** corfu + cape
Load corfu for autocomplete
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    ;; (setq tab-always-indent 'complete)
  )
#+end_src

Load cape to use company backends for corfu
#+begin_src emacs-lisp
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; NOTE: The order matters!
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;; (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src
** prescient
Load prescient for better ordering of completions
#+begin_src emacs-lisp
  (use-package prescient
    :after vertico)
  (use-package vertico-prescient
    :after vertico
    :init
    (vertico-prescient-mode))
#+end_src
** consult
Load consult for various useful commands
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)              ;; Alternative: consult-flymake
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-fd)                    ;; Alternative: consult-find
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )
#+end_src

** xclip
Copy + paste from clipboard
#+begin_src emacs-lisp
  (use-package xclip
    :init
    (xclip-mode 1))
#+end_src

** jinx (disabled)
Load jinx for spell-checking.  Disabled because of too many false negatives in tex.
See https://github.com/minad/jinx/issues/25
#+begin_src emacs-lisp :tangle no
  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :after tex
    :bind ([remap ispell-word] . jinx-correct))
#+end_src

Use vertico grid display to fit more suggestions on screen.
#+begin_src emacs-lisp :tangle no
  (setq vertico-multiform-categories '((jinx grid) (vertico-grid-annotate . 36)))
  (vertico-multiform-mode 1)
#+end_src

** dashboard
Load dashboard and open it on startup.
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)

    ;; Set init time info
    (setq dashboard-set-init-info nil)

    ;; Set the title
    (setq dashboard-banner-logo-title nil)

    ;; Set the banner
    (setq dashboard-startup-banner nil)
    ;; Value can be
    ;; - nil to display no banner
    ;; - 'official which displays the official emacs logo
    ;; - 'logo which displays an alternative emacs logo
    ;; - 1, 2 or 3 which displays one of the text banners
    ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
    ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

    ;; Set the footer
    (setq dashboard-set-footer nil)

    ;; Content is not centered by default. To center, set
    ;; (setq dashboard-center-content t)

    ;; To disable shortcut "jump" indicators for each section, set
    (setq dashboard-show-shortcuts nil)

    ;; ;; Use icons
    ;; (setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package
    ;; (setq dashboard-set-file-icons t)
    ;; (setq dashboard-heading-icons '((recents   . "history")
    ;;                                 (bookmarks . "bookmark")
    ;;                                 (agenda    . "calendar")
    ;;                                 (projects  . "rocket")
    ;;                                 (registers . "database")))
    ;; (setq dashboard-set-heading-icons t)

    (setq dashboard-items '((bookmarks . 12)
                            (recents  . 12)))
    ;;                            (projects . 5)
    ;;                            (agenda . 5)
    ;;                            (registers . 5)))
    )
#+end_src

** prism
Install prism and activate it in julia-mode.
#+begin_src emacs-lisp
  (use-package prism
    :hook (julia-mode . prism-mode))
#+end_src
** which-key
Install and activate which-key, change seperator to ":" to fix vertical spacing issues.
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (setq which-key-separator ": "))
#+end_src

* Org
This section configures how org-mode behaves.
** load org mode with auto-indent
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t)
    (setq org-startup-truncated nil)
    (setq org-ellipsis " ▾"))
#+end_src

** enable indentation in source block
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

** allow shift select
#+begin_src emacs-lisp
  (setq org-support-shift-select 'always)
#+end_src

** powerthesaurus
Load powerthesaurus for looking up synonyms, antonyms and related terms.
#+begin_src emacs-lisp
  (use-package powerthesaurus)
#+end_src


** go-translate
Load go-translate to translate between German and English (C-n / C-p to switch translation direction)
#+begin_src emacs-lisp
  (use-package go-translate
    :config
    (setq gts-translate-list '(("de" "en")))
    ;; (setq gts-default-translator (gts-translator :engines (gts-bing-engine)))
    (setq gts-default-translator
          (gts-translator
           :picker (gts-prompt-picker)
           :engines (list (gts-bing-engine) (gts-google-engine))
           :render (gts-buffer-render))))
#+end_src


* Git
** magit
Load magit.
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)
#+end_src


* Shell
** Bash and bash aliases
Use bash as default shell and use bash aliases
#+begin_src emacs-lisp
  (setq explicit-shell-file-name "/bin/bash")
  (setq shell-file-name "bash")
  (setq explicit-bash.exe-args '("--noediting" "--login" "-ic"))
  (setq shell-command-switch "-ic")
  (setenv "SHELL" shell-file-name)
#+end_src


* Latex
** auctex
Load auctex and reftex when opening .tex files.
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :mode
    ("\\.tex\\'" . latex-mode)
    :hook
    (LaTeX-mode . reftex-mode)
    (latex-mode . reftex-mode))
#+end_src

Auto-parse tex file on load and save.
#+begin_src emacs-lisp
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
#+end_src

Never assume current file is master file and always query for master file.
#+begin_src emacs-lisp
  (setq-default TeX-master nil)
#+end_src

Register lstlisting as verbatim environment, ignore it for syntax highlighting
#+begin_src emacs-lisp
  (eval-after-load 'latex '(add-to-list 'LaTeX-verbatim-environments "lstlisting"))
#+end_src

Highlight \cref like \ref
#+begin_src emacs-lisp
  (setq font-latex-match-reference-keywords
        '(
           ("cref" "{")
         )
  )
#+end_src

Auto-query for label for certain environments
#+begin_src emacs-lisp
  (setq reftex-label-alist
        '(
          ("convention" ?d "con:" "~\\ref{%s}" t  ("convention" "con."))
          ("corollary" ?p "cor:" "~\\ref{%s}" t  ("corollary" "cor."))
          ("definition" ?d "def:" "~\\ref{%s}" t  ("definition" "def."))
          ("example" ?x "ex:" "~\\ref{%s}" t  ("example" "ex."))
          ("lemma" ?p "lem:" "~\\ref{%s}" t  ("lemma" "lem."))
          ("proposition" ?p "prop:" "~\\ref{%s}" t  ("proposition" "prop."))
          ("remark" ?x "rem:" "~\\ref{%s}" t  ("remark" "rem."))
          ("theorem" ?p "thm:" "~\\ref{%s}" t ("theorem" "thm."))
         )
  )

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-add-environments
               '("convention" LaTeX-env-label)
               '("corollary" LaTeX-env-label)
               '("definition" LaTeX-env-label)
               '("example" LaTeX-env-label)
               '("lemma" LaTeX-env-label)
               '("proposition" LaTeX-env-label)
               '("remark" LaTeX-env-label)
               '("theorem" LaTeX-env-label))
              (add-to-list
               'LaTeX-label-alist
               '("convention" . "con:"))
              (add-to-list
               'LaTeX-label-alist
               '("corollary" . "cor:"))
              (add-to-list
               'LaTeX-label-alist
               '("definition" . "def:"))
              (add-to-list
               'LaTeX-label-alist
               '("example" . "ex:"))
              (add-to-list
               'LaTeX-label-alist
               '("lemma" . "lem:"))
              (add-to-list
               'LaTeX-label-alist
               '("proposition" . "prop:"))
              (add-to-list
               'LaTeX-label-alist
               '("remark" . "rem:"))
              (add-to-list
               'LaTeX-label-alist
               '("theorem" . "thm:"))
            )
  )
#+end_src

Enable spellcheck by default
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook #'turn-on-flyspell)
#+end_src

** company-backends
Load various company latex backends via cape for corfu (for autocomplete)
#+begin_src emacs-lisp
  (use-package company-math
    :after tex
    :init
    (defun math-setup-capf ()
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-math-symbols-latex))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-math-symbols-unicode))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-latex-commands)))
    :hook
    (LaTeX-mode . math-setup-capf))

  (use-package company-reftex
    :after tex
    :init
    (defun reftex-setup-capf ()
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-reftex-labels))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-reftex-citations)))
    :hook
    (LaTeX-mode . reftex-setup-capf))

  (use-package company-auctex
    :after tex
    :init
    (defun auctex-setup-capf ()
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-labels))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-bibs))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-macros))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-symbols))
      (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-auctex-environments)))
    :hook
    (LaTeX-mode . auctex-setup-capf))
#+end_src

** pdf-tools
Load pdf-tools to View pdf and sync tex.
#+begin_src emacs-lisp
  (use-package pdf-tools
    :after tex
    :init
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    :config
    (pdf-tools-install)
    (setq pdf-view-resize-factor 1.05
          TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
          TeX-source-correlate-mode t
          TeX-source-correlate-start-server t))
#+end_src

** Latex input
#+begin_src emacs-lisp
  (with-temp-buffer
  (activate-input-method "TeX") ;; the input method has to be triggered for `quail-package-alist' to be non-nil
  (let ((quail-current-package (assoc "TeX" quail-package-alist)))
   (quail-define-rules ((append . t))
                       ("^\\alpha" ?ᵅ))))
#+end_src


* C++
** indentation
Disable tabsIndentation after open round brackets.
#+begin_src emacs-lisp
  (setq-default c-default-style "linux"
                c-basic-offset 2)
#+end_src

** singular
Turn on C++-mode for files ending in ".sing" and ".lib" for Singular.
#+begin_src emacs-lisp
  (setq auto-mode-alist (cons '("\\.sing\\'" . c++-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.lib\\'" .  c++-mode) auto-mode-alist))
#+end_src


* Julia
** julia-mode
Install julia-mode and automatically enter it when opening .jl files.
#+begin_src emacs-lisp
  (use-package julia-mode
    :mode "\\.jl\\'")
#+end_src

** eglot-jl
Install eglot-js for language server support and automatically start it when entering julia-mode.
Working on OSCAR files requires a valid Project.toml in the src folder.
#+begin_src emacs-lisp
  (use-package eglot-jl
    :after julia-mode
    :hook
    (julia-mode . eglot-ensure)
    (julia-mode . eglot-jl-init)
    :config
    (setq eldoc-echo-area-use-multiline-p nil))
#+end_src

Install julia-repl and automatically enter julia-repl-mode when entering julia-mode.
#+begin_src emacs-lisp
  (use-package julia-repl
    :after julia-mode
    :hook (julia-mode . julia-repl-mode)
    :init
    (setq exec-path (append exec-path '("/home/ren/software/julia-1.9.3/bin")))
    (add-to-list 'load-path "/home/ren/software/julia-1.9.3/bin/julia"))
#+end_src

* Local variables for tangling this configuration
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
